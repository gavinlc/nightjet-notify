service: nightjet-notify

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    ALERTS_TABLE: ${self:service}-alerts-${sls:stage}
    # For local development, use .env file
    # For production, use SSM parameters
    SMTP_FROM: ${ssm:/nightjet-notify/${sls:stage}/smtp/from, env:SMTP_FROM, 'alerts@nightjet-notify.com'}
    FRONTEND_URL: ${ssm:/nightjet-notify/${sls:stage}/frontend/url, env:FRONTEND_URL, 'http://localhost:3000'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-alerts-${sls:stage}"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        # - Effect: Allow
        #   Action:
        #     - s3:PutObject
        #     - s3:GetObject
        #     - s3:ListBucket
        #     - s3:DeleteObject
        #   Resource:
        #     - "arn:aws:s3:::${self:service}-webapp-${sls:stage}/*"
        #     - "arn:aws:s3:::${self:service}-webapp-${sls:stage}"

plugins:
  - serverless-s3-sync
  - serverless-dynamodb
  - serverless-domain-manager
  - serverless-esbuild
  - serverless-offline

custom:
  customDomain:
    domainName: api.nightjet-notify.com
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2
    apiType: rest
    createApexRecord: false
    hostedZoneId: ${ssm:/nightjet-notify/${sls:stage}/hosted-zone-id, ''}
    certificateName: "*.nightjet-notify.com"
    certificateArn: ${ssm:/nightjet-notify/${sls:stage}/certificate-arn, ''}
    certificateRegion: ${ssm:/nightjet-notify/${sls:stage}/certificate-region, 'us-east-1'}
  s3Sync:
    - bucketName: ${self:service}-webapp-${sls:stage}
      localDir: dist
      deleteRemoved: true
      followSymlinks: true
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    external:
      [
        "@aws-sdk/client-dynamodb",
        "@aws-sdk/lib-dynamodb",
        "@aws-sdk/client-ses",
        "util",
      ]
    exclude: []
    target: "node20"
    platform: "node"
    concurrency: 10
    watch:
      pattern: ["src/**/*.ts"]
      ignore: ["temp/**/*"]
    packager: "yarn"
    format: "cjs"
    define:
      "process.env.NODE_ENV": "'development'"
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3003
    noPrependStageInUrl: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      heapInitial: "200m"
      heapMax: "1g"
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      alerts:
        sources:
          - table: ${self:service}-alerts-${sls:stage}
            sources: [seeds/alerts.json]

functions:
  # API endpoints
  createAlert:
    handler: src/serverless/handlers/alerts.createAlert
    events:
      - http:
          path: /alerts
          method: post
          cors: true

  getAlerts:
    handler: src/serverless/handlers/alerts.getAlerts
    events:
      - http:
          path: /alerts
          method: get
          cors: true

  deleteAlert:
    handler: src/serverless/handlers/alerts.deleteAlert
    events:
      - http:
          path: /alerts/{id}
          method: delete
          cors: true

  # Daily check for available tickets
  checkAlerts:
    handler: src/serverless/handlers/alerts.checkAlerts
    events:
      - schedule: rate(1 hour)

  proxy:
    handler: src/serverless/handlers/proxy.proxyRequest
    environment:
      TARGET_URL: ${ssm:/nightjet-notify/${sls:stage}/proxy/target-url, env:TARGET_URL, 'https://www.nightjet.com/nj-booking-ocp/'}
    events:
      - http:
          path: /proxy/{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    AlertsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-alerts-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
    WebappBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: nightjet-notify-webapp-${sls:stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: CloudFrontAccess
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource:
                !Join [
                  "",
                  ["arn:aws:s3:::nightjet-notify-webapp-${sls:stage}/*"],
                ]
              Condition:
                StringEquals:
                  AWS:SourceArn:
                    !Join [
                      "",
                      [
                        "arn:aws:cloudfront::",
                        !Ref "AWS::AccountId",
                        ":distribution/",
                        !Ref CloudFrontDistribution,
                      ],
                    ]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          Origins:
            - DomainName:
                !Join [
                  ".",
                  [
                    "nightjet-notify-webapp-${sls:stage}",
                    "s3",
                    !Ref "AWS::Region",
                    "amazonaws",
                    "com",
                  ],
                ]
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: ""
              OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerCertificate:
            AcmCertificateArn: ${ssm:/nightjet-notify/${sls:stage}/web-certificate-arn, ''}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          Aliases:
            - nightjet-notify.com
            - www.nightjet-notify.com

    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: ${self:service}-oac-${sls:stage}
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    Route53Record:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${ssm:/nightjet-notify/${sls:stage}/hosted-zone-id, ''}
        Name: nightjet-notify.com
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront's hosted zone ID
          EvaluateTargetHealth: false

    Route53WWWRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${ssm:/nightjet-notify/${sls:stage}/hosted-zone-id, ''}
        Name: www.nightjet-notify.com
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront's hosted zone ID
          EvaluateTargetHealth: false

  Outputs:
    WebappBucketName:
      Value: nightjet-notify-webapp-${sls:stage}
    CloudFrontDistributionId:
      Value: !Ref CloudFrontDistribution
    CloudFrontDomainName:
      Value: !GetAtt CloudFrontDistribution.DomainName
